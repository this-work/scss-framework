////
///
/// Core util functions
///
/// @group Utils
/// @since 1.0.0
///
////

@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:selector';
@use 'sass:string';

@use './conversion' as conversion;

///
/// Helper to replace text in a string
///
/// @param {string} $string - Haystack
/// @param {string} $search - Needle
/// @param {string} $replace - Replacement
/// @return {string}
///
/// @file utils.scss
///
/// @example scss - Replace in a String "is" with "was"
/// $text: string-replace($text, "is", "was")
///
@function string-replace($string, $search, $replace: '') {
	$index: string.index($string, $search);

	@if $index {
		@return string.slice($string, 1, $index - 1) + $replace +
			string-replace(string.slice($string, $index + string.length($search)), $search, $replace);
	}

	@return $string;
}

///
/// Helper to split string in array
///
/// @param {string} $string - Haystack
/// @param {string} $separator - Needle to split the string
/// @return {array}
///
/// @file utils.scss
///
/// @example scss - Split '$text' in an array on very comma
/// $array: string-split($text, ",")
///
@function string-split($string, $separator) {
	$split-arr: ();

	$index: string.index($string, $separator);

	@while $index != null {
		$item: string.slice($string, 1, $index - 1);
		$split-arr: list.append($split-arr, $item);
		$string: string.slice($string, $index + 1);
		$index: string.index($string, $separator);
	}

	$split-arr: list.append($split-arr, $string);

	@return $split-arr;
}

///
/// Helper to flatten a deep array
///
/// @param {array} $list - Array / List
/// @return {array}
///
/// @file utils.scss
///
/// @example scss - Flatten a deep $breakpoints array
/// $breakpoints: flatten($breakpoints);
///
@function flatten($list) {
	$result: ();

	@each $entry in $list {
		@if (list.length($entry) == 1) {
			$result: list.append($result, $entry);
		} @else {
			$flat-entry: flatten($entry);

			@each $item in $flat-entry {
				$result: list.append($result, $item);
			}
		}
	}

	@return $result;
}

///
/// Helper to swap two entrys in an array
///
/// @param {array} $list - Array / List
/// @param {number} $index-a - Index of Item to Swap 1
/// @param {number} $index-b - Index of Item to Swap 2
/// @return {array}
///
/// @file utils.scss
///
/// @example scss - Swap entrys 3 and 5 in the color array
/// $colors: swap($colors, 3, 5);
///
@function swap($list, $index-a, $index-b) {
	@if math.abs($index-a) > list.length($list) or math.abs($index-b) > list.length($list) {
		@return $list;
	}

	$tmp: list.nth($list, $index-a);
	$list: list.set-nth($list, $index-a, list.nth($list, $index-b));
	$list: list.set-nth($list, $index-b, $tmp);

	@return $list;
}

///
/// Sort an array by value.
///
/// @param {array} $array - Array to sort.
/// @return {array} - Sorted Array
///
/// @file utils.scss
///
@function sort-values($array) {
	$keys: map.keys($array);
	$values: map.values($array);

	@for $i from 1 through list.length($values) {
		@for $j from $i * -1 through -1 {
			$j: math.abs($j);

			@if ($j > 1 and conversion.number(list.nth($values, $j)) < conversion.number(list.nth($values, $j - 1))) {
				$keys: swap($keys, $j, $j - 1);
				$values: swap($values, $j, $j - 1);
			}
		}
	}

	$sorted-array: ();

	@for $k from 1 through list.length($values) {
		$sorted-array: map.merge(
			$sorted-array,
			(
				list.nth($keys, $k): list.nth($values, $k),
			)
		);
	}

	@return $sorted-array;
}

///
///
@function increased-sine-value($size, $factor: 1, $maximum: 200) {
	$size: conversion.number(conversion.strip-unit($size));
	$normalized-size: math.div($size, $maximum);
	$curve-value: math.sin($normalized-size * (math.div(math.$pi, 2)));
	$adjusted-factor: 1 + ($factor - 1) * $curve-value;
	@return round($size * $adjusted-factor);
}

///
/// Wrap a css custom property in a :root pseudoclass when no parent exist
///
/// @content Rules or directives, which are wrapped in a possbile :root pseudoclass
///
/// @file utils.scss
///
@mixin css-custom-properties-wrapper() {
	@if (&) {
		@content;
	} @else {
		:root {
			@content;
		}
	}
}

///
/// Generate from array a bundle of classes
///
/// @param {array} $map - Array to loop
/// @param {string} $property - CSS property to set
/// @param {string} $class-prefix - Class prefix
/// @param {string} $class-separator - [`optional`] Class sperator
///
/// @file utils.scss
///
@mixin generate-classes($map, $property, $class-prefix, $class-separator: '-') {
	@each $key, $value in $map {
		.#{$class-prefix}#{$class-separator}#{$key} {
			#{$property}: $value;
		}
	}
}
