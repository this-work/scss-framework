////
///
/// Color functions
///
/// @group Theme
/// @since 2.0.0
///
////

@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:selector';
@use 'sass:string';

@use './../core' as utils;

///
/// CSS custom properties color map prefix.
/// All colors will be prefixed with given string.
///
/// @type string
/// @file colors.scss
///
$color-map-prefix: 'color-' !default;

///
/// Associate base color array.
/// Includes a key/value pair of the color to increase the consistency.
///
/// @prop {String} name - Name of the color
/// @prop {Color} hex - Hexcode of the color
///
/// @type array
/// @file colors.scss
///
/// @example scss - Declare two colors
///  $color-base (
///     'color-1' : #000000,
///     'color-2' : #FFFFFF
///  );
///
$color-base: () !default;

///
/// Associate color derivate array.
/// Includes a key/value pair of the color to increase the consistency.
///
/// @prop {String} name - Name of the color
/// @prop {Color} hex - Hexcode of the color
///
/// @type array
/// @file colors.scss
///
/// @example scss - Declare two colors
///  $color-derivates (
///     'color-1:alpha' : rgba(map.get($color-base,'color-1'), .75),
///     'color-2:alpha' : rgba(map.get($color-base,'color-2'), .5),
///  );
///
$color-derivates: () !default;

///
/// Prefix of the theme mode class.
///
/// @type string
/// @file colors.scss
///
$color-mode-class-prefix: 'color-mode-' !default;

///
/// CSS custom properties color-mode map prefix.
/// All mode propertys will be prefixed with given string.
///
/// @type string
/// @file colors.scss
///
$color-mode-property-prefix: 'color-mode-property-' !default;

///
/// Default mode. The variable determines the default
/// css attributes per palette. Can be disabled with false.
///
/// @type string|boolean
/// @file colors.scss
///
$color-mode-default: false !default;

///
/// Associate theme mode array.
/// Includes a object with palette names which includes the mode name with the corresponding style
/// changes. Optionally, instead of the value of the style attribute, it is possible to open another array for
/// optional pseudo classes.
///
/// @type array
/// @file colors.scss
///
/// @example scss - Set a copytext color mode palette for light, medium and dark and a complexer link color mode palette
///  $color-palettes: (
///     'copytext': (
///         light: (
///             color: 'black'
///         ),
///         dark: (
///             color: 'white'
///         )
///     ),
///     'link': (
///         light: (
///				color: (
///					'default': 'black',
///					':hover': #FF00FF,
///				),
///         ),
///         dark: (
///				color: (
///					'default': 'white',
///					':hover': #FF00FF,
///				),
///         )
///     )
///  );
///
$color-palettes: () !default;

///
/// Get the entry from color array as hexcode
///
/// @param {string} $color-name - Name of the color
/// @param {array} $color-map [map.merge($color-base, $color-derivates)] - [`optional`] Custom color array
///
/// @return {string} Hexcode
///
/// @file colors.scss
///
/// @example scss - Set the css color to 'color-1'
/// color: color('color-1');
///
@function color($color-name, $color-map: map.merge($color-base, $color-derivates)) {
	@if (not map.has-key($color-map, $color-name)) {
		@error 'Given color map has no color named "#{$color-name}".';
	}

	@return var(--#{$color-map-prefix}#{$color-name});
}

///
/// Create a color css custom property with given palette informations
///
/// @param {string} $palette - Name of the palette of the attribute
/// @param {string} $attribute - CSS attribute which be filled with the custom property
/// @param {string|array} $value - Value of the attribute. Can be a array too, see color-variations array.
///
/// @file colors.scss
///
/// @example scss
/// include css-custom-property-color-attribute();
///
@mixin -css-custom-property-color-attribute($palette, $attribute, $value) {
	@if meta.type-of($value) == color or meta.type-of($value) == list or meta.type-of($value) == string {
		#{$attribute}: var(--#{$color-mode-property-prefix}#{$palette}-#{$attribute});
	} @else {
		@each $pseudo, $color in $value {
			@if $pseudo == 'default' {
				#{$attribute}: var(--#{$color-mode-property-prefix}#{$palette}-#{$attribute});
			} @else {
				&#{$pseudo} {
					#{$attribute}: var(
						--#{$color-mode-property-prefix}#{$palette}-#{$attribute}-#{utils.string-replace($pseudo, ':', '')}
					);
				}
			}
		}
	}
}

///
/// Create a color css custom property with given palette informations
///
/// @param {string} $palette - Name of the palette of the attribute
/// @param {string} $attribute - CSS attribute for the constant naming
/// @param {string|array} $value - Value of the attribute. Can be a array too, see color-variations array.
/// @param {bool} $default - Indicator if this is a default declaration
///
/// @file colors.scss
///
/// @example scss
/// include -css-custom-property-color-declaration();
///
@mixin -css-custom-property-color-declaration($palette, $attribute, $value) {
	// stylelint-disable
	@if meta.type-of($value) == color or meta.type-of($value) == list {
		@include -css-custom-property-color-declaration-type($palette, $attribute, $value);
	} @else if meta.type-of($value) == string {
		@if string.index($value, 'gradient') {
			@include -css-custom-property-color-declaration-type($palette, $attribute, $value);
		} @else {
			@include -css-custom-property-color-declaration-type($palette, $attribute, color($value));
		}
	} @else {
		@each $pseudo, $color in $value {
			@if $pseudo == 'default' {
				@if meta.type-of($color) == string {
					@if string.index($color, 'gradient') {
						@include -css-custom-property-color-declaration-type($palette, $attribute, $color);
					} @else {
						@include -css-custom-property-color-declaration-type($palette, $attribute, color($color));
					}
				} @else {
					@include -css-custom-property-color-declaration-type($palette, $attribute, $color);
				}
			} @else {
				@if meta.type-of($color) == string {
					@if string.index($color, 'gradient') {
						@include -css-custom-property-color-declaration-type($palette, $attribute + '-' + $pseudo, $color);
					} @else {
						@include -css-custom-property-color-declaration-type($palette, $attribute + '-' + $pseudo, color($color));
					}
				} @else {
					@include -css-custom-property-color-declaration-type($palette, $attribute + '-' + $pseudo, $color);
				}
			}
		}
	}
	// stylelint-enable
}

///
/// Create based on the given default prop a Houdini css custom property
///
/// @param {string} $palette - Name of the palette of the attribute
/// @param {string} $attribute - CSS attribute for the constant naming
/// @param {string|array} $value - Value of the attribute. Can be a array too, see color-variations array.
/// @param {bool} $default - Indicator if this is a default declaration
///
/// @file colors.scss
///
/// @example scss
/// include -css-custom-property-color-declaration-type();
///
@mixin -css-custom-property-color-declaration-type($palette, $attribute, $value) {
	--#{$color-mode-property-prefix}#{$palette}-#{utils.string-replace($attribute, ":", "")}: #{$value};
}

///
/// Generate from the color-palettes array all attributs from the given palette. All attributes will
/// be are output as css custom properties.
///
/// @param {string} $palette - Color mode palette name
/// @param {string} $cherrypick [false] - [`optional`] Only the given attribute will be rendered.
/// @param {array} $color-palettes-map[$color-palettess] - [`optional`] Theme variations array
///
/// @file colors.scss
///
/// @example scss - Render all attributes from the copytext palette with matching custom property variables
/// include color-variation('copytext');
///
@mixin color-palette($palette, $cherrypick: false, $color-palettes-map: $color-palettes) {
	@if (not map.has-key($color-palettes-map, $palette)) {
		@error 'Given color mode map has no palette named "#{$palette}".';
	}

	$restructured-color-palettes: ();
	@each $palette-name, $color-mode in $color-palettes-map {
		@each $theme-variation, $attributes in $color-mode {
			$restructured-color-palettes: map.deep-merge(
				$restructured-color-palettes,
				(
					$palette-name: $attributes,
				)
			);
		}
	}

	@each $attribute, $value in map.get($restructured-color-palettes, $palette) {
		@if ($attribute == $cherrypick and not ($cherrypick == false)) or ($cherrypick == false) {
			@include -css-custom-property-color-attribute($palette, $attribute, $value);
		}
	}
}

///
/// Generate from the color-palettes array all color modes with all associated css custom properties
///
/// @param {array} $color-palettes-map[$color-palettes] - [`optional`] Theme variations array
///
/// @file colors.scss
///
/// @example scss - Create all css custom properties color-mode color attributes
/// include declare-color-modes();
///
@mixin declare-color-modes($color-palettes-map: $color-palettes) {
	$restructured-color-palettes: ();

	@each $palette-name, $color-mode in $color-palettes-map {
		@each $theme-variation, $attributes in $color-mode {
			$restructured-color-palettes: map.deep-merge(
				$restructured-color-palettes,
				(
					$theme-variation: (
						$palette-name: $attributes,
					),
				)
			);
		}
	}

	///
	/// Build default declaration
	@each $mode, $palettes in $restructured-color-palettes {
		@if ($color-mode-default and $color-mode-default == $mode) {
			@include utils.css-custom-properties-wrapper {
				@each $palette, $attributes in $palettes {
					@each $attribute, $value in $attributes {
						@include -css-custom-property-color-declaration($palette, $attribute, $value);
					}
				}
			}
		}
	}

	///
	/// Build all founded color modes with the default declaration with class
	@each $mode, $palettes in $restructured-color-palettes {
		.#{$color-mode-class-prefix}#{$mode} {
			@each $palette, $attributes in $palettes {
				@if ($color-mode-default) {
					$default-color-variation-palette: map.get(
						map.get($restructured-color-palettes, $color-mode-default),
						$palette
					);
					$attributes: map.deep-merge($default-color-variation-palette, $attributes);
				}

				@each $attribute, $value in $attributes {
					@include -css-custom-property-color-declaration($palette, $attribute, $value);
				}
			}
		}
	}
}

///
/// Mixin to generate css custom properties for each color based on a given color map
///
/// @param {array} $color-map ['map.merge($color-base, $color-derivates)'] - [`optional`] Custom color array
///
/// @file colors.scss
///
/// @example scss - Create all css custom properties color attributes
/// include declare-color-map();
///
@mixin declare-color-map($color-map: map.merge($color-base, $color-derivates)) {
	@include utils.css-custom-properties-wrapper {
		@each $color-name, $color-value in $color-map {
			--#{$color-map-prefix}#{$color-name}: #{$color-value};
		}
	}
}

///
/// Generate a bundle of foreground color classes based on given color map
///
/// @param {array} $color-map [$color-base] - [`optional`] Color array
/// @param {string} $class-prefix ['foreground-color'] - [`optional`] Class prefix
/// @param {string} $class-separator ['-'] - [`optional`] Class sperator
///
/// @file colors.scss
///
/// @example scss - Create foreground colors classes
/// include generate-color-foreground-classes();
///
@mixin generate-color-foreground-classes(
	$color-map: $color-base,
	$class-prefix: 'foreground-color',
	$class-separator: '-'
) {
	@include utils.generate-classes($color-map, color, $class-prefix, $class-separator);
}

///
/// Generate a bundle of background color classes based on given color map
///
/// @param {array} $color-map [$color-base] - [`optional`] Color array
/// @param {string} $class-prefix ['background-color'] - [`optional`] Class prefix
/// @param {string} $class-separator ['-'] - [`optional`] Class seperator
///
/// @file colors.scss
///
/// @example scss - Create background colors classes
/// include generate-color-background-classes();
///
@mixin generate-color-background-classes(
	$color-map: $color-base,
	$class-prefix: 'background-color',
	$class-separator: '-'
) {
	@each $color-name, $color-value in $color-map {
		.#{$class-prefix}#{$class-separator}#{$color-name} {
			background-color: color($color-name);
		}
	}
}
