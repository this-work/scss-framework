////
///
/// Typography functions
///
/// @group Theme
/// @since 2.0.0
///
////

@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:selector';
@use 'sass:string';

@use './../core' as utils;
@use './../view/breakpoints' as *;
@use './../view/mediaqueries' as mediaquery;

///
/// Bold tag weight.
/// Weight of the bold tag as base for the project. Can be a number or a font-weight entry
/// Alias for js import: 'defaultNormalizeBoldWeight'
/// @type string|number
///
$default-normalize-bold-weight: 'bold'!default;

///
/// Default font dimension for project
/// @type string
///
$default-font-dimension: '' !default;

///
/// Project default font family.
/// Alias for js import: 'defaultFontFamily'
/// @type string
///
$default-font-family: 'Arial'!default;

///
///
$font-size-map-prefix: 'font-size-' !default;

///
///
$font-style-map-prefix: 'font-style-' !default;

///
/// Font dimension configuration.
/// Configuration of all possible font size/line height combinations. Optional extendable with a letter-spacing value.
/// Alias for js import: 'fontDimensions'
/// @type array
///
$font-dimensions: () !default;

///
///
$font-styles: () !default;

///
///
$font-factor: () !default;

///
///
$font-config: () !default;

///
/// Font weight array to get a mapping of the weights.
///
/// @type array
/// @example scss - Set book, regular and demi as weight mapping for the project
///  $font-weights (
///     'book': 200,
///     'regular': 450,
///     'demi': 600,
///   );
///
$font-weights: (
		'extralight' : 100,
		'light'      : 200,
		'book'       : 300,
		'regular'    : 400,
		'medium'     : 500,
		'semibold'   : 600,
		'bold'       : 700,
		'black'      : 800,
		'extrablack' : 900,
) !default;

///
///
@function font-size($font-dimension, $font-dimensions-map: $font-dimensions) {
  @if (not map.has-key($font-dimensions-map, $font-dimension)) {
	@error 'Given font dimension has no dimension named "#{$font-dimension}".';
  }
  @return var(--#{$font-size-map-prefix}#{$font-dimension});
}

///
///
@function letter-spacing( $font-dimension, $font-dimensions-map: $font-dimensions) {
  $letter-spacing: 0;

  @if (type-of($font-dimension) == string) {
	@if (not map-has-key($font-dimensions-map, $font-dimension)) {
	  @error 'Given font dimensions has no dimension named "#{$font-dimension}".';
	}
	@if (map-has-key(map-get($font-dimensions-map, $font-dimension), "letter-spacing")) {
	  $letter-spacing: map-get(map-get($font-dimensions-map, $font-dimension), "letter-spacing");
	}
  } @else {
	$letter-spacing: $font-dimension;
  }

  @if (math.unit($letter-spacing) == "%") {
	$letter-spacing: math.div(utils.strip-unit($letter-spacing), 100) * 1em;
  } @else {
	$letter-spacing: utils.unitize($letter-spacing);
  }
  @return $letter-spacing;
}

///
///
@function line-height( $font-dimension, $font-dimensions-map: $font-dimensions) {
  @if (not map-has-key($font-dimensions-map, $font-dimension)) {
	@error 'Given font dimensions has no dimension named "#{$font-dimension}".';
  }
  $font-line-height: map-get(map-get($font-dimensions-map, $font-dimension), "line-height");
  @if (math.unit($font-line-height) == "px") {
	$font-line-height: math.div(utils.strip-unit($font-line-height), utils.strip-unit(map.get(map-get($font-dimensions-map, $font-dimension), 'size')));
  }
  @return $font-line-height;
}

///
///
@function font-family( $font-name, $font-config-map: $font-config) {
  @if (not map-has-key($font-config-map, $font-name)) {
	@error 'Given font config has no font named "#{$font-name}".';
  }
  @return #{$font-name}, #{map-get(map-get($font-config-map, $font-name), "alternate-stack")};
}

///
///
@function font-weight( $weight, $font-weights-map: $font-weights ) {
  $font-weight: false;
  @if (not map-has-key($font-weights-map, $weight)) {
	@if (not list.index(map-values($font-weights-map), $weight)) {
	  @error 'Given font weight mapping has no weight "#{$weight}".';
	} @else {
	  $font-weight: $weight;
	}

  } @else {
	$font-weight: map-get($font-weights-map, $weight);
  }
  @return $font-weight;
}

///
///
@function font(
  $font-style,
  $font-family-overwrite: false,
  $font-weight-overwrite: false,
  $line-height-overwrite: false,
  $font-styles-map: $font-styles,
  $font-dimensions-map: $font-dimensions
){

  $font-style-definition: map.get($font-styles, $font-style);

  $font-familiy: font-family(list.nth($font-style-definition, 1));
  @if ($font-family-overwrite) {
	$font-familiy: font-family($font-family-overwrite);
  }

  $font-weight: font-weight(list.nth($font-style-definition, 2));
  @if ($font-weight-overwrite) {
	$font-weight: font-weight($font-weight-overwrite);
  }

  $line-height: line-height(list.nth($font-style-definition, 3));
  @if (list.length($font-style-definition) >= 4) {
	$line-height: utils.unitize(list.nth($font-style-definition, 4));
  }
  @if ($line-height-overwrite) {
	$line-height: utils.unitize($line-height-overwrite);
  }

  @return $font-weight font-size(list.nth($font-style-definition, 3))/#{$line-height} $font-familiy;
}

///
///
@mixin font-style(
  	$font-style,
	$font-family-overwrite: false,
    $font-weight-overwrite: false,
    $line-height-overwrite: false,
    $letter-spacing-overwrite: false,
    $font-styles-map: $font-styles
){
  @if (not map.has-key($font-styles, $font-style)) {
	@error 'Given font styles has no style named "#{$font-style}".';
  }
  $font-style-definition: map.get($font-styles, $font-style);

  $letter-spacing: false;
  @if (list.length($font-style-definition) >= 5) {
	$letter-spacing: letter-spacing(list.nth($font-style-definition, 5));
  }
  @if ($letter-spacing-overwrite) {
	$letter-spacing: utils.unitize($letter-spacing-overwrite);
  }

  @if (	$font-family-overwrite or $font-weight-overwrite or $line-height-overwrite) {
	font: font($font-style, $font-family-overwrite, $font-weight-overwrite, $line-height-overwrite);
  } @else {
	font: var(--#{$font-style-map-prefix}#{$font-style});
  }
  @if ($letter-spacing) {
	letter-spacing: $letter-spacing;
  }
}

///
///
@mixin declare-font-style-map($font-styles-map: $font-styles) {
  @include utils.css-custom-properties-wrapper {
	@each $font-styles-name, $font-style in $font-styles-map {
	  --#{$font-style-map-prefix}#{$font-styles-name}: #{font($font-styles-name)};
	}
  }
}

///
///
@mixin declare-font-size-map($font-dimensions-map: $font-dimensions) {
  @include utils.css-custom-properties-wrapper {
	@each $font-dimension-name, $font-dimension in $font-dimensions-map {
	  --#{$font-size-map-prefix}#{$font-dimension-name}: #{utils.unitize(utils.increased-sine-value(map.get($font-dimension, 'size'), map.get($font-factor, 'default')) + 'px')};
	}
  }
  @each $breakpoint, $breakpoint-value in $breakpoint-config {
	@include mediaquery.above($breakpoint) {
	  @include utils.css-custom-properties-wrapper {
		@each $font-dimension-name, $font-dimension in $font-dimensions-map {
		  @if (map.has-key($font-factor, $breakpoint)) {
			--#{$font-size-map-prefix}#{$font-dimension-name}: #{utils.unitize(utils.increased-sine-value(map.get($font-dimension, 'size'), map.get($font-factor, $breakpoint)) + 'px')};
		  }
		}
	  }
	}
  }
}

///
/// Generate all font-face declarations from the fonts config
///
/// @param {array} $font-config-map [$default-font-config-map] - [`optional`] Font config array
///
@mixin generate-font-face-declaration(
  $font-config-map: $font-config
) {

  @if ($font-config-map and length($font-config-map) > 0) {

	@each $font-name, $font-map in $font-config-map {

	  @if map-has-key($font-map, "faces") {

		$faces: map-get($font-map, "faces");

		@if type-of($faces) == map {
		  $faces: append((), ($faces));
		}

		@each $font-face in $faces {

		  @if map-has-key($font-face, "paths") {

			$sources: ();

			@each $path in map-get($font-face, "paths") {

			  $pathChunks: utils.string-split($path, '.');

			  $format: to-lower-case(nth(utils.string-split($path, '.'), length($pathChunks)));

			  @if ($format == "ttf") {

				$format: "truetype";

			  }

			  $sources: append($sources, (url('#{$path}') format('#{$format}')), 'comma');

			}

			$font-style: normal;

			@if (map-has-key($font-face, 'style')) {

			  $font-style: map-get($font-face, 'style');

			}

			$font-weight: font-weight(map-get($font-face, 'weight'));


			$font-display: auto;

			@if (map-has-key($font-face, 'display')) {

			  $font-display: map-get($font-face, 'display');

			}

			@at-root {

			  @font-face {
				font-family: #{$font-name};
				src: $sources;
				font-style: $font-style;
				font-weight: $font-weight;
				font-display: $font-display;
			  }

			}

		  }

		}

	  }

	}

  }

}

///
/// Generate all typography classes from the responsive font config
///
/// @param {string} $prefix ['is-typo-'] - [`optional`] Font class prefix
///
@mixin generate-typography-classes(
  $prefix: 'is-typo-'
) {
  @each $key, $value in $font-styles {
	.#{$prefix}#{$key} {
	  @include font-style($key);
	}
  }
}

